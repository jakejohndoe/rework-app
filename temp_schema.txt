generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String           @unique
  emailVerified  DateTime?
  image          String?
  plan           Plan             @default(FREE)
  resumesCreated Int              @default(0)
  lastActiveAt   DateTime         @default(now())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  accounts       Account[]
  applications   JobApplication[]
  resumes        Resume[]
  sessions       Session[]

  @@map("users")
}

model Resume {
  id               String           @id @default(cuid())
  userId           String
  title            String
  originalContent  Json?
  currentContent   Json
  originalFileUrl  String?
  templateId       String?
  isActive         Boolean          @default(true)
  wordCount        Int?
  lastOptimized    DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  contentType      String?
  fileSize         Int?
  originalFileName String?
  s3Bucket         String?
  s3Key            String?
  applications     JobApplication[]
  versions         ResumeVersion[]
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("resumes")
}

model ResumeVersion {
  id            String   @id @default(cuid())
  resumeId      String
  versionNumber Int
  content       Json
  changes       String?
  createdAt     DateTime @default(now())
  resume        Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@unique([resumeId, versionNumber])
  @@map("resume_versions")
}

model JobApplication {
  id               String            @id @default(cuid())
  userId           String
  resumeId         String
  jobTitle         String
  company          String
  jobDescription   String
  jobUrl           String?
  optimizedContent Json?
  matchScore       Float?
  keywords         String[]
  suggestions      Json?
  status           ApplicationStatus @default(DRAFT)
  appliedAt        DateTime?
  responseAt       DateTime?
  generatedPdfUrl  String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  resume           Resume            @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("job_applications")
}

enum Plan {
  FREE
  PREMIUM
}

enum ApplicationStatus {
  DRAFT
  OPTIMIZED
  APPLIED
  INTERVIEW
  REJECTED
  OFFER
}


