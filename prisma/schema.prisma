// Enhanced Prisma schema with structured resume fields
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Core ReWork Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  plan          Plan      @default(FREE)

  // Usage tracking
  resumesCreated Int      @default(0)
  lastActiveAt   DateTime @default(now())

  // Relations
  accounts     Account[]
  sessions     Session[]
  resumes      Resume[]
  applications JobApplication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Resume {
  id     String @id @default(cuid())
  userId String
  title  String

  // LEGACY CONTENT STORAGE (keep for backward compatibility)
  originalContent Json? // Parsed text from uploaded file
  currentContent  Json  // Current editable content - LEGACY FORMAT

  // NEW STRUCTURED CONTENT FIELDS
  // Contact Information - structured fields for better AI analysis
  contactInfo Json? // { firstName, lastName, email, phone, location, linkedin, website }
  
  // Professional Summary - enhanced with keywords and targeting
  professionalSummary Json? // { summary, targetRole, keyStrengths, careerLevel }
  
  // Work Experience - structured job entries for precise AI matching
  workExperience Json? // [{ id, jobTitle, company, startDate, endDate, location, achievements[], technologies[], isCurrentRole }]
  
  // Education - structured for ATS optimization
  education Json? // [{ id, degree, field, institution, graduationYear, gpa, honors[], relevantCoursework[] }]
  
  // Skills - categorized for sophisticated AI analysis
  skills Json? // { technical[], frameworks[], tools[], cloud[], databases[], soft[], certifications[] }
  
  // Projects - showcase relevant work for better job matching
  projects Json? // [{ id, name, description, technologies[], url, achievements[], startDate, endDate }]
  
  // Additional Sections - flexible content for comprehensive profiles
  additionalSections Json? // { certifications[], awards[], publications[], languages[], volunteer[] }

  // METADATA AND OPTIMIZATION TRACKING
  structuredDataVersion String? @default("1.0") // Track data format version for migrations
  dataCompletionScore   Float?  // 0-100 score of how complete the structured data is
  lastStructuredUpdate  DateTime? // When structured fields were last updated
  
  // File references (AWS S3)
  originalFileUrl  String? // Legacy field - keep for backward compatibility
  templateId       String? // Which template they're using
  
  // S3 FIELDS
  s3Key            String? // S3 object key (e.g., "users/123/resumes/filename.pdf")
  s3Bucket         String? // S3 bucket name
  originalFileName String? // Original uploaded filename
  fileSize         Int?    // File size in bytes
  thumbnailUrl     String? // Thumbnail URL for preview
  contentType      String? // MIME type (application/pdf, etc.)

  // Metadata
  isActive      Boolean   @default(true)
  wordCount     Int?
  lastOptimized DateTime?

  // Relations
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications JobApplication[]
  versions     ResumeVersion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("resumes")
}

model ResumeVersion {
  id            String  @id @default(cuid())
  resumeId      String
  versionNumber Int
  content       Json
  changes       String? // Description of what changed

  // NEW: Track both legacy and structured content versions
  structuredContent Json? // Store structured version alongside legacy content
  
  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([resumeId, versionNumber])
  @@map("resume_versions")
}

model JobApplication {
  id       String @id @default(cuid())
  userId   String
  resumeId String

  // Job details
  jobTitle       String
  company        String
  jobDescription String  @db.Text
  jobUrl         String?

  // ENHANCED AI Analysis with structured data support
  optimizedContent     Json?     // AI-optimized resume content
  optimizedStructured  Json?     // NEW: AI-optimized structured content
  matchScore          Float?    // 0-100 compatibility score
  categoryScores      Json?     // NEW: { technical: 85, experience: 92, education: 78, skills: 88, contact: 90, keywords: 75 }
  keywords            String[]  // Extracted keywords
  suggestions         Json?     // AI improvement suggestions
  
  // NEW: Enhanced analysis tracking
  analysisVersion     String?   @default("1.0") // Track analysis algorithm version
  lastAnalyzed        DateTime? // When AI analysis was last run

  // Application tracking
  status     ApplicationStatus @default(DRAFT)
  appliedAt  DateTime?
  responseAt DateTime?

  // File output (AWS S3)
  generatedPdfUrl String? // S3 URL of final PDF

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("job_applications")
}

// Enums
enum Plan {
  FREE
  PREMIUM
}

enum ApplicationStatus {
  DRAFT
  OPTIMIZED
  APPLIED
  INTERVIEW
  REJECTED
  OFFER
}